plugins {
    id "groovy"
    id "java-gradle-plugin"
    id "com.gradle.plugin-publish" version "0.21.0"
    id "com.diffplug.spotless" version "6.4.2"
    id "pl.allegro.tech.build.axion-release" version "1.13.6"
    id "com.github.ben-manes.versions" version "0.42.0"
    id "nebula.lint" version "17.7.0"
}

group = "com.github.michaelruocco"

scmVersion {
    versionCreator "versionWithBranch"
    tag {
        prefix = "gradle-postman-runner-"
    }
}
project.version = scmVersion.version

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    implementation "com.github.node-gradle:gradle-node-plugin:3.1.1"
    implementation "org.apache.commons:commons-io:1.3.2"
    implementation "com.google.code.gson:gson:2.9.0"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.assertj:assertj-core:3.22.0"
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.33.1"
    testImplementation("org.spockframework:spock-core:2.2-M1-groovy-3.0") {
        exclude group: "org.codehaus.groovy"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

def gitUrl = "https://github.com/michaelruocco/gradle-postman-runner"
pluginBundle {
    website = gitUrl
    vcsUrl = "${gitUrl}.git"
    description = "Gradle plugin to run postman"
    tags = ["postman", "newman"]

    plugins {
        gradlePostmanRunner {
            id = "com.github.michaelruocco.gradle-postman-runner"
            displayName = "Gradle plugin to run postman"
        }
    }
}

test {
    useJUnitPlatform()
}

spotless {
    groovy {
        importOrder()
    }
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()

        replace 'Not enough space after if', 'if(', 'if ('
        replaceRegex 'Too much space after if', 'if +\\(', 'if ('

        replace 'Not enough space after for', 'for(', 'for ('
        replaceRegex 'Too much space after for', 'for +\\(', 'for ('

        replace 'Not enough space after while', 'while(', 'while ('
        replaceRegex 'Too much space after while', 'while +\\(', 'while ('
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}